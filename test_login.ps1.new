# Test Login API Script for ZioHelp Backend
$ErrorActionPreference = 'Stop'

Write-Host "ZioHelp Login API Test Suite" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan

# Configuration
$baseUrl = "http://localhost:8080"
$apiEndpoint = "$baseUrl/api/auth/login"
$headers = @{
    'Content-Type' = 'application/json; charset=utf-8'
}

function Test-ServerAvailable {
    try {
        $response = Invoke-WebRequest -Uri $baseUrl -Method HEAD -TimeoutSec 5
        return $true
    }
    catch {
        return $false
    }
}

function Invoke-LoginTest {
    param (
        [Parameter(Mandatory=$true)]
        [string]$TestName,
        
        [Parameter(Mandatory=$true)]
        [hashtable]$TestData,
        
        [Parameter(Mandatory=$true)]
        [int]$ExpectedStatus
    )
    
    Write-Host "`nTest Case: $TestName" -ForegroundColor Yellow
    Write-Host "--------------------" -ForegroundColor Yellow
    
    $body = $TestData | ConvertTo-Json
    Write-Host "Request Body: $body"
    
    try {
        $response = Invoke-WebRequest -Uri $apiEndpoint -Method Post -Headers $headers -Body $body
        Write-Host "[SUCCESS] Status Code: $($response.StatusCode)"
        Write-Host "Response: $($response.Content)"
        
        if ($response.StatusCode -eq $ExpectedStatus) {
            Write-Host "Test passed" -ForegroundColor Green
            return $true
        }
        Write-Host "Test failed - Expected $ExpectedStatus but got $($response.StatusCode)" -ForegroundColor Red
        return $false
    }
    catch {
        $statusCode = $_.Exception.Response.StatusCode.value__
        Write-Host "[ERROR] Status Code: $statusCode" -ForegroundColor Red
        
        if ($_.Exception.Response) {
            $reader = [System.IO.StreamReader]::new($_.Exception.Response.GetResponseStream())
            $body = $reader.ReadToEnd()
            $reader.Dispose()
            Write-Host "Error Details: $body" -ForegroundColor Red
        }
        
        if ($statusCode -eq $ExpectedStatus) {
            Write-Host "Test passed (expected error)" -ForegroundColor Green
            return $true
        }
        Write-Host "Test failed - Expected $ExpectedStatus but got $statusCode" -ForegroundColor Red
        return $false
    }
}

# Check server availability
Write-Host "`nChecking server availability..." -ForegroundColor Cyan
if (-not (Test-ServerAvailable)) {
    Write-Host "Error: Server is not available at $baseUrl" -ForegroundColor Red
    Write-Host "Please ensure the Spring Boot application is running." -ForegroundColor Yellow
    exit 1
}

Write-Host "Server is available. Running tests..." -ForegroundColor Green

# Test cases based on LoginRequest validation requirements
$testCases = @(
    @{
        Name = "Valid login with email/password"
        Data = @{
            email = "admin@example.com"
            password = "password123"
        }
        ExpectedStatus = 200
    },
    @{
        Name = "Invalid password (too short)"
        Data = @{
            email = "admin@example.com"
            password = "short"
        }
        ExpectedStatus = 400
    },
    @{
        Name = "Invalid email format"
        Data = @{
            email = "not-an-email"
            password = "password123"
        }
        ExpectedStatus = 400
    },
    @{
        Name = "Empty password"
        Data = @{
            email = "admin@example.com"
            password = ""
        }
        ExpectedStatus = 400
    },
    @{
        Name = "Username login"
        Data = @{
            username = "admin123"
            password = "password123"
        }
        ExpectedStatus = 200
    },
    @{
        Name = "Invalid username format"
        Data = @{
            username = "admin@#$%"
            password = "password123"
        }
        ExpectedStatus = 400
    }
)

# Run all tests
$failedTests = 0
foreach ($test in $testCases) {
    $success = Invoke-LoginTest -TestName $test.Name -TestData $test.Data -ExpectedStatus $test.ExpectedStatus
    if (-not $success) {
        $failedTests++
    }
}

# Print summary
Write-Host "`nTest Summary" -ForegroundColor Cyan
Write-Host "===========" -ForegroundColor Cyan
Write-Host "Total Tests: $($testCases.Count)"
Write-Host "Failed Tests: $failedTests" -ForegroundColor $(if ($failedTests -eq 0) { 'Green' } else { 'Red' })
$successRate = [math]::Round(100 - ($failedTests/$testCases.Count*100), 2)
Write-Host "Success Rate: $successRate%" -ForegroundColor $(if ($failedTests -eq 0) { 'Green' } else { 'Yellow' })
